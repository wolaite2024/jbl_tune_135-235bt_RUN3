/**
*****************************************************************************************
*     Copyright(c) 2015, Realtek Semiconductor Corporation. All rights reserved.
*****************************************************************************************
  * @file     transmit_service.h
  * @brief    Head file for using dualmode service.
  * @details
  * @author   jane
  * @date     2015-5-12
  * @version  v0.1
  * *************************************************************************************
  */

/* Define to prevent recursive inclusion */
#ifndef _TRANSMIT_SRV_H_
#define _TRANSMIT_SRV_H_

#ifdef  __cplusplus
extern "C" {
#endif      /* __cplusplus */

/* Add Includes here */
#if F_APP_GATT_SERVER_EXT_API_SUPPORT
#include <profile_server_ext.h>
#else
#include <profile_server.h>
#endif
#include "app_flags.h"

/** @defgroup TRANSMIT_SERVICE Transmit Service
  * @brief Transmit service
  * @details

    The Transmit Service is a user-defined service, it is used to help transmit data only.

    Application shall registger transmit service when initialization through @ref transmit_srv_add function.

    Application can send data through @ref transmit_srv_tx_data function.

  * <b>Example usage</b>
  * \code{.c}
     void app_transmit_data(uint8_t conn_id, T_SERVER_ID srv_id, uint8_t *tx_data)
     {
        ...
        //transmit data
        transmit_srv_tx_data(conn_id, srv_id, sizeof(tx_data), tx_data);
        ...
  *  }
  * \endcode

  * @{
  */
/*============================================================================*
 *                              Macros
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Macros Transmit Service Exported Macros
  * @brief
  * @{
  */

/** @defgroup TRANSMIT_SERVICE_Upstream_Message TRANSMIT_SERVICE Upstream Message
  * @brief  Upstream message used to inform application.
  * @{
  */
#define TRANSMIT_SVC_TX_DATA_CCCD_ENABLE        1
#define TRANSMIT_SVC_TX_DATA_CCCD_DISABLE       2

#define TRANSMIT_READ_BATTERY_LEVEL             1

/** Define Tx Rx roles from the device's perspective  */
#define TRANSMIT_SVC_TX_DATA_INDEX              2       /**< @brief Index for Transmit Service Rx chars's value */
#define TRANSMIT_SVC_TX_DATA_CCCD_INDEX         3       /**< @brief Index for Transmit Service Rx chars's CCCD value */
#define TRANSMIT_SVC_RX_DATA_INDEX              5       /**< @brief Index for Transmit Service Tx chars's value */
#define TRANSMIT_SVC_AUX_TRX_DATA_INDEX         7       /**< @brief Index for Transmit Service Aux TRx chars's value */
#define TRANSMIT_SVC_AUX_TRX_DATA_CCCD_INDEX    8       /**< @brief Index for Transmit Service Aux TRx chars's CCCD value */
#define TRANSMIT_SVC_DELAY_MODE_INDEX           0xFF    /**< @brief Index for Transmit Service delay mode chars's value */
/** @} End of TRANSMIT_SERVICE_Upstream_Message */

/** @} End of TRANSMIT_SERVICE_Exported_Macros */

/*============================================================================*
 *                              Types
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Types Transmit Service Exported Types
  * @brief
  * @{
  */
/* Add all public types here */
/** @defgroup TRANSMIT_SERVICE_Callback_Data Transmit Service Callback Data
  * @brief Transmit service data struct for notification data to application.
  * @{
  */
typedef struct
{
    uint16_t len;
    uint8_t *p_value;
} T_RX_DATA;
/** Message content: @ref TRANSMIT_SERVICE_Upstream_Message */
typedef enum
{
    TRANSMIT_PARAM_BATTERY_LEVEL = 0x01,
} T_TRANSMIT_PARAM_TYPE;
typedef union
{
    uint8_t notification_indification_value;
    T_RX_DATA rx_data;
    uint8_t read_value_index;
} T_TRANSMIT_SRV_MSG_DATA;

/** Transmit service data to inform application */
typedef struct
{
    T_SERVICE_CALLBACK_TYPE  msg_type;

#if F_APP_GATT_SERVER_EXT_API_SUPPORT
    uint16_t                 conn_handle;
    uint16_t                 cid;
#endif

    uint8_t                  conn_id;

    uint8_t                  attr_index;
    T_TRANSMIT_SRV_MSG_DATA msg_data;
} T_TRANSMIT_SRV_CALLBACK_DATA;
/** @} */

/** @} End of TRANSMIT_SERVICE_Exported_Types */
/*============================================================================*
 *                              Functions
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Functions Transmit Service Exported Functions
  * @brief
  * @{
  */

/**
  * @brief Add transmit service to the BLE stack database.
  *
  * @param[in]   p_func_cb  Callback when service attribute was read, write or cccd update.
  * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
  * @retval 0xFF Operation failure.
  * @retval others Service id assigned by stack.
  *
  */
T_SERVER_ID transmit_srv_add(void *p_func_cb);

/**
  * @brief transmit data.
  *
  * @param[in] conn_id   Connection ID.
  * @param[in] service_id   Service ID.
  * @param[in] len   Length of value to be sendt.
  * @param[in] p_value Pointer of value to be sent.
  * @return transmit result
  * @retval 1 TRUE
  * @retval 0 FALSE
  */
bool transmit_srv_tx_data(uint8_t conn_id, uint16_t len, uint8_t *p_value);

bool transmit_battery_level_value_read_confirm(uint8_t conn_id, uint8_t service_id,
                                               uint8_t battery_level);

bool transmit_set_parameter(T_TRANSMIT_PARAM_TYPE param_type, uint8_t length, uint8_t *p_value);

/** @} End of TRANSMIT_SERVICE_Exported_Functions */

/** @} End of TRANSMIT_SERVICE */


#ifdef  __cplusplus
}
#endif      /*  __cplusplus */

#endif  /* _TRANSMIT_SRV_H_ */
